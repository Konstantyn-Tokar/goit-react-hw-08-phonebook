{"version":3,"sources":["components/ContactList/ContactList.module.css","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.jsx","helpers/firstLetterUpper.js","components/ContactList/ContactList.jsx","components/Filter/Filter.jsx","views/ContactsView.js"],"names":["module","exports","getLoading","state","contacts","loading","getItems","items","getFilter","filter","getFilterContacts","createSelector","name","toLowerCase","includes","ContactForm","useState","setName","number","setNumder","dispatch","useDispatch","сontacts","useSelector","handelChange","e","target","value","toСlear","Form","onSubmit","preventDefault","find","contact","alert","addContact","Group","className","controlId","Label","Control","type","pattern","title","required","onChange","autoComplete","Button","variant","toUpperCaseFirstLetter","arrFromStr","split","toUpperCase","join","ContactList","useEffect","fatchContact","ListGroup","as","map","id","Item","s","item","text","text_d","button","onClick","deleteContact","Filter","handelChangeFilter","currentTarget","TodosView","loader","Container","Row","Col","sm","color","height","width"],"mappings":"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","file":"static/js/6.bd7f19fb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"text\":\"ContactList_text__Jjeq1\",\"text_d\":\"ContactList_text_d__1_0Uu\",\"item\":\"ContactList_item__1wvTB\",\"button\":\"ContactList_button__XFDLi\"};","import { createSelector } from \"reselect\";\r\n\r\nexport const getLoading = (state) => state.contacts.loading;\r\nexport const getItems = (state) => state.contacts.items;\r\nexport const getFilter = (state) => state.contacts.filter;\r\n\r\nexport const getFilterContacts = createSelector(\r\n  [getItems, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(({ name }) =>\r\n      name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  }\r\n);\r\n","import { useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/contacts-operations.js\";\nimport Button from \"react-bootstrap/Button\";\nimport Form from \"react-bootstrap/Form\";\nimport { getItems } from \"../../redux/contacts/contacts-selectors\";\n\nexport default function ContactForm() {\n  const [name, setName] = useState(\"\");\n  const [number, setNumder] = useState(\"\");\n  const dispatch = useDispatch();\n  const сontacts = useSelector(getItems);\n\n  const handelChange = (e) => {\n    const { name, value } = e.target;\n    switch (name) {\n      case \"name\":\n        setName(value);\n        break;\n\n      case \"number\":\n        setNumder(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handelSubmit = (e) => {\n    e.preventDefault();\n    if (\n      сontacts.find(\n        (contact) => contact.name.toLowerCase() === name.toLowerCase()\n        // (contact) => contact.name.toLowerCase() === name.toLowerCase()\n      )\n    ) {\n      return alert(`Пользователь с именем ${name} уже добавлен`);\n    }\n\n    dispatch(addContact({ name, number }));\n    toСlear();\n  };\n\n  const toСlear = () => {\n    setName(\"\");\n    setNumder(\"\");\n  };\n\n  return (\n    <Form onSubmit={handelSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n        <Form.Label>Name</Form.Label>\n        <Form.Control\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handelChange}\n          autoComplete=\"off\"\n        />\n      </Form.Group>\n\n      <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n        <Form.Label>Number</Form.Label>\n        <Form.Control\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handelChange}\n          autoComplete=\"off\"\n        />\n      </Form.Group>\n\n      <Button type=\"submit\" variant=\"outline-secondary\" className=\"mx-6\">\n        Add contact\n      </Button>\n    </Form>\n  );\n}\n","export const toUpperCaseFirstLetter = (value) => {\r\n  const arrFromStr = value.split(\"\");\r\n  arrFromStr[0] = arrFromStr[0].toUpperCase();\r\n  return arrFromStr.join(\"\");\r\n};\r\n","import { useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  deleteContact,\n  fatchContact,\n} from \"../../redux/contacts/contacts-operations.js\";\nimport { getFilterContacts } from \"../../redux/contacts/contacts-selectors\";\nimport { toUpperCaseFirstLetter } from \"../../helpers/firstLetterUpper\";\n\nimport ListGroup from \"react-bootstrap/ListGroup\";\nimport { BsTrash } from \"react-icons/bs\";\n\nimport s from \"./ContactList.module.css\";\n\nexport default function ContactList() {\n  const contacts = useSelector(getFilterContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fatchContact());\n  }, [dispatch]);\n\n  return (\n    <ListGroup as=\"ul\" variant=\"flush\">\n      {contacts.map(({ id, name, number }) => (\n        <ListGroup.Item as=\"li\" className={s.item} key={id}>\n          <div>\n            <p className={s.text}>\n              Name:{\" \"}\n              <span className={s.text_d}>{toUpperCaseFirstLetter(name)}</span>\n            </p>\n            <p className={s.text}>\n              Number: <span className={s.text_d}>{number}</span>\n            </p>\n          </div>\n          <button\n            type=\"button\"\n            id={id}\n            className={s.button}\n            onClick={() => dispatch(deleteContact(id))}\n          >\n            <BsTrash />\n          </button>\n        </ListGroup.Item>\n      ))}\n    </ListGroup>\n  );\n}\n","import { useSelector, useDispatch } from \"react-redux\";\nimport { handelChangeFilter } from \"../../redux/contacts/contacts-action\";\nimport { getFilter } from \"../../redux/contacts/contacts-selectors\";\nimport Form from \"react-bootstrap/Form\";\n\nexport default function Filter() {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <Form.Label>Find contacts by name</Form.Label>\n      <Form.Control\n        className=\"form-control-my\"\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={(e) => dispatch(handelChangeFilter(e.currentTarget.value))}\n        autoComplete=\"off\"\n      />\n    </>\n  );\n}\n","import { useSelector } from \"react-redux\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport Col from \"react-bootstrap/Col\";\r\nimport Container from \"react-bootstrap/Container\";\r\nimport ContactForm from \"../components/ContactForm\";\r\nimport ContactList from \"../components/ContactList\";\r\nimport Filter from \"../components/Filter\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport { getLoading } from \"../redux/contacts/contacts-selectors\";\r\n\r\nexport default function TodosView() {\r\n  const loader = useSelector(getLoading);\r\n  return (\r\n    <Container className=\"p-3\">\r\n      <Row>\r\n        <Col sm={4}>\r\n          <ContactForm />\r\n          <Container className=\"p-5\">\r\n            {loader && (\r\n              <Loader\r\n                className=\"loader\"\r\n                type=\"Oval\"\r\n                color=\"#5C636A\"\r\n                height={60}\r\n                width={60}\r\n              />\r\n            )}\r\n          </Container>\r\n        </Col>\r\n        <Col sm={8}>\r\n          <Filter />\r\n          <ContactList />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n"],"sourceRoot":""}